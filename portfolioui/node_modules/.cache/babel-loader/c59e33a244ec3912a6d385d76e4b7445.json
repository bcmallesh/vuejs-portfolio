{"remainingRequest":"D:\\vuejs\\portfolioui\\node_modules\\babel-loader\\lib\\index.js!D:\\vuejs\\portfolioui\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\vuejs\\portfolioui\\src\\service\\AuthenticationService.js","dependencies":[{"path":"D:\\vuejs\\portfolioui\\src\\service\\AuthenticationService.js","mtime":1590320836298},{"path":"D:\\vuejs\\portfolioui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vuejs\\portfolioui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\vuejs\\portfolioui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _classCallCheck from \"D:\\\\vuejs\\\\portfolioui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\vuejs\\\\portfolioui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport axios from 'axios';\nvar API_URL = 'http://localhost:8200/portfolio';\nexport var USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nvar AuthenticationService =\n/*#__PURE__*/\nfunction () {\n  function AuthenticationService() {\n    _classCallCheck(this, AuthenticationService);\n  }\n\n  _createClass(AuthenticationService, [{\n    key: \"executeJwtAuthenticationService\",\n    // executeBasicAuthenticationService(username, password) {\n    //     return axios.get(`${API_URL}/basicauth`,\n    //         { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    // }\n    value: function executeJwtAuthenticationService(username, password) {\n      console.log(username);\n      return axios.post(\"\".concat(API_URL, \"/login\"), {\n        username: username,\n        password: password\n      });\n    } // createBasicAuthToken(username, password) {\n    //     return 'Basic ' + window.btoa(username + \":\" + password)\n    // }\n\n  }, {\n    key: \"createJWTToken\",\n    value: function createJWTToken(token) {\n      return 'Bearer ' + token;\n    } // registerSuccessfulLogin(username, password) {\n    //     sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n    //     this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    // }\n\n  }, {\n    key: \"registerSuccessfulLoginForJwt\",\n    value: function registerSuccessfulLoginForJwt(username, token) {\n      sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n      this.setupAxiosInterceptors(this.createJWTToken(token));\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n  }, {\n    key: \"isUserLoggedIn\",\n    value: function isUserLoggedIn() {\n      var user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return false;\n      return true;\n    }\n  }, {\n    key: \"getLoggedInUserName\",\n    value: function getLoggedInUserName() {\n      var user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n      if (user === null) return '';\n      return user;\n    }\n  }, {\n    key: \"setupAxiosInterceptors\",\n    value: function setupAxiosInterceptors(token) {\n      var _this = this;\n\n      axios.interceptors.request.use(function (config) {\n        if (_this.isUserLoggedIn()) {\n          config.headers.authorization = token;\n        }\n\n        return config;\n      });\n    }\n  }]);\n\n  return AuthenticationService;\n}();\n\nexport default new AuthenticationService();",{"version":3,"sources":["D:\\vuejs\\portfolioui\\src\\service\\AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","username","password","console","log","post","token","sessionStorage","setItem","setupAxiosInterceptors","createJWTToken","removeItem","user","getItem","interceptors","request","use","config","isUserLoggedIn","headers","authorization"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,OAAO,GAAG,iCAAhB;AAEA,OAAO,IAAMC,gCAAgC,GAAG,mBAAzC;;IAEDC,qB;;;;;;;;;AAEF;AACA;AACA;AACA;oDAEgCC,Q,EAAUC,Q,EAAU;AAChDC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,aAAOJ,KAAK,CAACQ,IAAN,WAAcP,OAAd,aAA+B;AAClCG,QAAAA,QAAQ,EAARA,QADkC;AAElCC,QAAAA,QAAQ,EAARA;AAFkC,OAA/B,CAAP;AAIH,K,CAED;AACA;AACA;;;;mCAEeI,K,EAAO;AAClB,aAAO,YAAYA,KAAnB;AACH,K,CAED;AACA;AACA;AACA;;;;kDAE8BL,Q,EAAUK,K,EAAO;AAC3CC,MAAAA,cAAc,CAACC,OAAf,CAAuBT,gCAAvB,EAAyDE,QAAzD;AACA,WAAKQ,sBAAL,CAA4B,KAAKC,cAAL,CAAoBJ,KAApB,CAA5B;AACH;;;6BAEQ;AACLC,MAAAA,cAAc,CAACI,UAAf,CAA0BZ,gCAA1B;AACH;;;qCAEgB;AACb,UAAIa,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuBd,gCAAvB,CAAX;AACA,UAAIa,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,aAAO,IAAP;AACH;;;0CAEqB;AAClB,UAAIA,IAAI,GAAGL,cAAc,CAACM,OAAf,CAAuBd,gCAAvB,CAAX;AACA,UAAIa,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,aAAOA,IAAP;AACH;;;2CAEsBN,K,EAAO;AAAA;;AAC1BT,MAAAA,KAAK,CAACiB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,UAACC,MAAD,EAAY;AACR,YAAI,KAAI,CAACC,cAAL,EAAJ,EAA2B;AACvBD,UAAAA,MAAM,CAACE,OAAP,CAAeC,aAAf,GAA+Bd,KAA/B;AACH;;AACD,eAAOW,MAAP;AACH,OANL;AAQH;;;;;;AAGL,eAAe,IAAIjB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'http://localhost:8200/portfolio'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    // executeBasicAuthenticationService(username, password) {\n    //     return axios.get(`${API_URL}/basicauth`,\n    //         { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    // }\n\n    executeJwtAuthenticationService(username, password) {\n        console.log(username);\n        return axios.post(`${API_URL}/login`, {\n            username,\n            password\n        })\n    }\n\n    // createBasicAuthToken(username, password) {\n    //     return 'Basic ' + window.btoa(username + \":\" + password)\n    // }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n    // registerSuccessfulLogin(username, password) {\n    //     sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n    //     this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    // }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()"]}]}