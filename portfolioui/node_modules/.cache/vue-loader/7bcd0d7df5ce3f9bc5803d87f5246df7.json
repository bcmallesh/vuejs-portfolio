{"remainingRequest":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vuejs\\workspace\\09062020\\portfolioui\\src\\components\\CreateProjectWithSections.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\src\\components\\CreateProjectWithSections.vue","mtime":1591844918806},{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591670532187},{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\babel-loader\\lib\\index.js","mtime":1591670526439},{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591670532187},{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\vue-loader\\lib\\index.js","mtime":1591670721635}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import Menu from \"./Menu\";\nimport ProjectInfoDataService from \"../service/ProjectInfoDataService\";\nimport ProjectDataService from \"../service/ProjectDataService\";\n\nimport AuthenticationService from \"../service/AuthenticationService\";\nimport Notification from './notifications.vue';\nimport PictureInput from 'vue-picture-input'\n    export default{\n         name: \"create-project-info\",\n         \n  components: {\n    Menu,\n    'notification' : Notification,\n    PictureInput\n\n  },\n  data(){\n    return {\n        delimiters: ['${', '}'],\n        sectionfiles: {sectionindex:\"\", sectionindex:\"\"},\n         files: [],\n         projectfiles:[],\n       \n        color: '#444444',\n          projectinfo:{\n    sections:[\n       {\n      sectionname: '',\n      sectiontext:'',\n      secionid:'',\n       files: [],\n       }\n     ]\n          },\n                notifications:[],\n                isAuthenticated: AuthenticationService.isUserLoggedIn(),\n\n                industries: this.retrieveLookupData(),\n                types: this.retrieveLookupData(),\n                works: this.retrieveLookupData(),\n                strongformats: this.retrieveFormatLookupData(),\n                industries: this.retrieveLookupData(),\n                file:\"\",\n    sectionfile:\"\",\n    }\n    \n    \n  },\n  methods : {\n   handleFileDrop(e) {\n      let droppedFiles = e.dataTransfer.files;\n      if(!droppedFiles) return;\n      // this tip, convert FileList to array, credit: https://www.smashingmagazine.com/2018/01/drag-drop-file-uploader-vanilla-js/\n      ([...droppedFiles]).forEach(f => {\n    \n    this.files.push(f);\n      });\n\n      this.color=\"#444444\"\n    },\n  handleProjectFileInput(e) {\n      let files = e.target.files;\n      files = e.target.files\n            if(!files) return;\n      // this tip, convert FileList to array, credit: https://www.smashingmagazine.com/2018/01/drag-drop-file-uploader-vanilla-js/\n      ([...files]).forEach(f => {\n    \n    this.projectfiles.push(f);\n      });\n\n            //this.projectinfo.sections[sectionIndex].files=e.target.files;\n\n    },\n    removeProjectFile(fileKey){\n      this.projectfiles.splice(fileKey, 1)\n    },\n    \n\n    handleFileInput(e,sectionIndex) {\n      let files = e.target.files;\n      files = e.target.files\n            if(!files) return;\n      // this tip, convert FileList to array, credit: https://www.smashingmagazine.com/2018/01/drag-drop-file-uploader-vanilla-js/\n      ([...files]).forEach(f => {\n    \n    this.files.push(f);\n      });\n\n            this.projectinfo.sections[sectionIndex].files=e.target.files;\n\n    },\n    removeFile(fileKey,sectionIndex){\n      let files =this.projectinfo.sections[sectionIndex].files;\n      files.splice(fileKey, 1)\n      this.projectinfo.sections[sectionIndex].files=files;\n    },\n\n    fileDragIn(){\n      // alert(\"oof\")\n      // alert(\"color\")\n      this.color=\"white\"\n    },\n    fileDragOut(){\n      this.color=\"#444444\"\n    },\n  retrieveLookupData() {\n      ProjectInfoDataService.getLookupData()\n        .then(response => {\n          this.industries = response.data.industryLookupData;\n          this.works = response.data.workLookupData;\n          this.types = response.data.typeLookupData;\n\n         // console.log(\"industry===>\"+this.industries);\n        })\n        .catch(e => {\n          console.log(e);\n        });\n    },\n    retrieveFormatLookupData() {\n      ProjectInfoDataService.getFormatLookupData()\n        .then(response => {\n          this.strongformats = response.data.strongformat;\n          //this.works = response.data.workLookupData;\n          //this.types = response.data.typeLookupData;\n\n          //console.log(\"industry===>\"+this.industries);\n        })\n        .catch(e => {\n          console.log(e);\n        });\n    },\n    addProjectSection(){\n      this.projectinfo.sections.push({\n        sectionname:'',\n        sectiontext: '',\n        sectionimage:''\n\n      })\n    },\n    deleteProjectSection(counter){\n      this.projectinfo.sections.splice(counter,1);\n    },\n\naddProjectInfo: function()\n            {\n                let formData = new FormData();\n\n            /*\n                Add the form data we need to submit\n            */\n            formData.append('files', this.files);\n            formData.append('projectinfo', this.projectinfo);\n\n                \n\n      ProjectInfoDataService.create(this.files,this.projectinfo)\n        .then(response => {\n         this.notifications.push({\n                        type: 'success',\n                        message: 'Project Info created successfully'\n                    });\n        }, (response) => {\n                    this.notifications.push({\n                        type: 'error',\n                        message: 'Project Info not created'\n                    });\n                })\n        .catch(e => {\n          console.log(e);\n        });\n\n    },\n\n    \n  }\n}\n",{"version":3,"sources":["CreateProjectWithSections.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA","file":"CreateProjectWithSections.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<section>\n<Menu/>\n  <div id=\"projectinfo\">\n    <h1>Project Creation</h1>\n    <form v-on:submit.prevent=\"addProjectInfo\" enctype=\"multipart/form-data\">\n\n      <label for=\"projectname\">Project Name:</label>\n      <input type=\"text\" v-model=\"projectinfo.projectname\" id=\"projectname\" required>\n      <label for=\"projectnameformat\">Project Name Format:</label>\n       <select  v-model=\"projectinfo.strongformat\" id=\"strongformat\"  required>\n        <option v-for=\"(strongformat, index) in strongformats\" :key=\"index\" v-bind:value=\"strongformat.key\">\n            {{strongformat.value}}\n        </option>\n    </select>  \n          <label for=\"projectnamefontsize\">Project Name Font Size:</label>\n\n          <input type=\"number\" v-model=\"projectinfo.projectnamefontsize\" id=\"projectnamefontsize\" required>\n\n      <br>\n      <label for=\"projectdescription\">Project Description:</label>\n      <textarea  type=\"text\" v-model=\"projectinfo.projectdescription\" id=\"projectdescription\" required></textarea >\n   \n    <label for=\"projectdescriptionformattype\">Project Description Format:</label>\n       <select  v-model=\"projectinfo.work\" id=\"projectdescriptionformattype\"  required>\n        <option v-for=\"(work, index) in works\" :key=\"index\" v-bind:value=\"work.key\">\n            {{work.value}}\n        </option>\n    </select>\n\n    \n                <label name=\"project_name\">Project Industry</label>\n                \n            <select  v-model=\"projectinfo.project\" id=\"projectNameList\"  required>\n        <option v-for=\"(project, index) in projects\" :key=\"index\" v-bind:value=\"project.id\">\n            {{project.name}}\n        </option>\n    </select>  \n           \n\n              \n                <label name=\"project_industry\">Industry</label>\n                \n            <select  v-model=\"projectinfo.industry\" id=\"industryList\"  required>\n        <option v-for=\"(industry, index) in industries\" :key=\"index\" v-bind:value=\"industry.key\">\n            {{industry.value}}\n        </option>\n    </select>  \n            \n\n                <label name=\"project_type\">Type</label>\n                \n            <select  v-model=\"projectinfo.type\" id=\"typeList\"  required>\n        <option v-for=\"(type, index) in types\" :key=\"index\" v-bind:value=\"type.key\">\n            {{type.value}}\n        </option>\n    </select>  \n    <br>\n    <label name=\"project_description\">Project Upload</label>\n           \n\n    <div  @dragleave=\"fileDragOut\" @dragover=\"fileDragIn\" @drop=\"handleFileDrop\"  >\n      <br>\n      <div class=\"file-wrapper\">\n        <input type=\"file\" name=\"file\" multiple=\"True\"  @change=\"handleProjectFileInput($event)\" > Click to insert Project Files.\n      </div>\n      <ul>\n        <li v-for=\"(file, index) in projectfiles\">\n          {{ file.name }} ({{ file.size }} b)\n          <button @click=\"removeProjectFile(index)\" title=\"Remove\">X</button>\n        </li>\n      </ul>\n    </div>\n \n  \n \n     <br><br>\n      <button @click=\"addProjectSection\">Add Project Section</button>\n      <br>\n      <div class=\"section\"\n      v-for=\"(section, counter) in projectinfo.sections\"\n      v-bind:key=\"counter\">\n        <span @click=\"deleteProjectSection(counter)\">x</span>\n        <label for=\"sectionname\">{{counter+1}}. Section Name:</label>\n        <input type=\"text\" v-model.lazy=\"section.sectionname\" required>\n        <label for=\"sectiontext\">Section Text:</label>\n        <textarea type=\"textarea\" v-model.lazy=\"section.sectiontext\" required> </textarea>\n         <br>\n\n\n    <div  @dragleave=\"fileDragOut\" @dragover=\"fileDragIn\" @drop=\"handleFileDrop\"  >\n      <br>\n      <div class=\"file-wrapper\">\n        <input type=\"file\" name=\"file\" multiple=\"True\"  @change=\"handleFileInput($event,counter)\" > Click to insert section Files.\n      </div>\n      <ul>\n        <li v-for=\"(file, index) in section.files\">\n          {{ file.name }} ({{ file.size }} b)\n          <button @click=\"removeFile(index,counter)\" title=\"Remove\">X</button>\n        </li>\n      </ul>\n    </div>\n \n\n      </div>\n                <button class=\"btn btn-primary\">Create</button>\n    </form>\n\n  </div>\n  </section>\n</template>\n\n<script>\n    import Menu from \"./Menu\";\nimport ProjectInfoDataService from \"../service/ProjectInfoDataService\";\nimport ProjectDataService from \"../service/ProjectDataService\";\n\nimport AuthenticationService from \"../service/AuthenticationService\";\nimport Notification from './notifications.vue';\nimport PictureInput from 'vue-picture-input'\n    export default{\n         name: \"create-project-info\",\n         \n  components: {\n    Menu,\n    'notification' : Notification,\n    PictureInput\n\n  },\n  data(){\n    return {\n        delimiters: ['${', '}'],\n        sectionfiles: {sectionindex:\"\", sectionindex:\"\"},\n         files: [],\n         projectfiles:[],\n       \n        color: '#444444',\n          projectinfo:{\n    sections:[\n       {\n      sectionname: '',\n      sectiontext:'',\n      secionid:'',\n       files: [],\n       }\n     ]\n          },\n                notifications:[],\n                isAuthenticated: AuthenticationService.isUserLoggedIn(),\n\n                industries: this.retrieveLookupData(),\n                types: this.retrieveLookupData(),\n                works: this.retrieveLookupData(),\n                strongformats: this.retrieveFormatLookupData(),\n                industries: this.retrieveLookupData(),\n                file:\"\",\n    sectionfile:\"\",\n    }\n    \n    \n  },\n  methods : {\n   handleFileDrop(e) {\n      let droppedFiles = e.dataTransfer.files;\n      if(!droppedFiles) return;\n      // this tip, convert FileList to array, credit: https://www.smashingmagazine.com/2018/01/drag-drop-file-uploader-vanilla-js/\n      ([...droppedFiles]).forEach(f => {\n    \n    this.files.push(f);\n      });\n\n      this.color=\"#444444\"\n    },\n  handleProjectFileInput(e) {\n      let files = e.target.files;\n      files = e.target.files\n            if(!files) return;\n      // this tip, convert FileList to array, credit: https://www.smashingmagazine.com/2018/01/drag-drop-file-uploader-vanilla-js/\n      ([...files]).forEach(f => {\n    \n    this.projectfiles.push(f);\n      });\n\n            //this.projectinfo.sections[sectionIndex].files=e.target.files;\n\n    },\n    removeProjectFile(fileKey){\n      this.projectfiles.splice(fileKey, 1)\n    },\n    \n\n    handleFileInput(e,sectionIndex) {\n      let files = e.target.files;\n      files = e.target.files\n            if(!files) return;\n      // this tip, convert FileList to array, credit: https://www.smashingmagazine.com/2018/01/drag-drop-file-uploader-vanilla-js/\n      ([...files]).forEach(f => {\n    \n    this.files.push(f);\n      });\n\n            this.projectinfo.sections[sectionIndex].files=e.target.files;\n\n    },\n    removeFile(fileKey,sectionIndex){\n      let files =this.projectinfo.sections[sectionIndex].files;\n      files.splice(fileKey, 1)\n      this.projectinfo.sections[sectionIndex].files=files;\n    },\n\n    fileDragIn(){\n      // alert(\"oof\")\n      // alert(\"color\")\n      this.color=\"white\"\n    },\n    fileDragOut(){\n      this.color=\"#444444\"\n    },\n  retrieveLookupData() {\n      ProjectInfoDataService.getLookupData()\n        .then(response => {\n          this.industries = response.data.industryLookupData;\n          this.works = response.data.workLookupData;\n          this.types = response.data.typeLookupData;\n\n         // console.log(\"industry===>\"+this.industries);\n        })\n        .catch(e => {\n          console.log(e);\n        });\n    },\n    retrieveFormatLookupData() {\n      ProjectInfoDataService.getFormatLookupData()\n        .then(response => {\n          this.strongformats = response.data.strongformat;\n          //this.works = response.data.workLookupData;\n          //this.types = response.data.typeLookupData;\n\n          //console.log(\"industry===>\"+this.industries);\n        })\n        .catch(e => {\n          console.log(e);\n        });\n    },\n    addProjectSection(){\n      this.projectinfo.sections.push({\n        sectionname:'',\n        sectiontext: '',\n        sectionimage:''\n\n      })\n    },\n    deleteProjectSection(counter){\n      this.projectinfo.sections.splice(counter,1);\n    },\n\naddProjectInfo: function()\n            {\n                let formData = new FormData();\n\n            /*\n                Add the form data we need to submit\n            */\n            formData.append('files', this.files);\n            formData.append('projectinfo', this.projectinfo);\n\n                \n\n      ProjectInfoDataService.create(this.files,this.projectinfo)\n        .then(response => {\n         this.notifications.push({\n                        type: 'success',\n                        message: 'Project Info created successfully'\n                    });\n        }, (response) => {\n                    this.notifications.push({\n                        type: 'error',\n                        message: 'Project Info not created'\n                    });\n                })\n        .catch(e => {\n          console.log(e);\n        });\n\n    },\n\n    \n  }\n}\n</script>\n\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nbody,html{\n  height: 100%;\n}\nmain {\n  margin-top: 30px;\n  height: 100%;\n}\n\n#app {\n  border: 1px solid yellow;\n  height: 100vh;\n}\n.file-wrapper {\n  text-align: center;\n  width: 300px;\n  height: 5em;\n  vertical-align: middle;\n  display: table-cell;\n  position: relative;\n  overflow: hidden;\n  background: gray; /* and other things to make it pretty */\n}\n\ntextarea {\n    overflow: auto;\n    resize: both;\n    width: 100%;\n}\n.file-wrapper input {\n    position: absolute;\n    top: 0;\n    right: 0; /* not left, because only the right part of the input seems to\n                 be clickable in some browser I can't remember */\n    cursor: pointer;\n    opacity: 0.0;\n    filter: alpha(opacity=0); /* and all the other old opacity stuff you\n                                 want to support */\n    font-size: 300px; /* wtf, but apparently the most reliable way to make\n                         a large part of the input clickable in most browsers */\n    height: 200px;\n}\n#projectinfo {\n  margin: 20px auto;\n  max-width: 700px;\n}\nlabel{\n  display: block;\n  margin: 20px 0 10px;\n}\ninput {\n  font-size: 100%;\n  border: 1px double rgb(102, 97, 96) ;\n  border-radius: 4px;\n}\nselect {\n  font-size:100%;\n  border: 1px double rgb(102, 97, 96) ;\n  border-radius: 4px;\n}\noption {\n  font-size:100%;\n  border: 1px double rgb(102, 97, 96) ;\n  border-radius: 4px;\n}\noptios {\n  font-size: 30px;\n  border: 1px double rgb(102, 97, 96) ;\n  border-radius: 4px;\n}\nbutton {\n  font-size: 16px;\n background: rgb(64, 179, 140);\n  padding: 0.4rem 1.3rem;\n  text-align: center;\n  border: none;\n  cursor: pointer;\n  border-radius: 4px;\n margin: 10px;\n}\nspan{\n  width: 30px;\n  float: right;\n  cursor: pointer;\n}\nspan:hover{\n  color: brown;\n}\n.section{\n  border: 1.5px solid;\n  padding:5px;\n  margin-bottom: 10px;\n}\n</style>"]}]}