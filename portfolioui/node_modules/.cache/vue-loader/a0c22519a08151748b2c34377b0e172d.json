{"remainingRequest":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vuejs\\workspace\\09062020\\portfolioui\\src\\components\\CreateProjectWithSections.vue?vue&type=template&id=42c7e3b1&scoped=true&","dependencies":[{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\src\\components\\CreateProjectWithSections.vue","mtime":1591844918806},{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591670532187},{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1591670721641},{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591670532187},{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\vue-loader\\lib\\index.js","mtime":1591670721635}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"section\",\n    [\n      _c(\"Menu\"),\n      _c(\"div\", { attrs: { id: \"projectinfo\" } }, [\n        _c(\"h1\", [_vm._v(\"Project Creation\")]),\n        _c(\n          \"form\",\n          {\n            attrs: { enctype: \"multipart/form-data\" },\n            on: {\n              submit: function($event) {\n                $event.preventDefault()\n                return _vm.addProjectInfo($event)\n              }\n            }\n          },\n          [\n            _c(\"label\", { attrs: { for: \"projectname\" } }, [\n              _vm._v(\"Project Name:\")\n            ]),\n            _c(\"input\", {\n              directives: [\n                {\n                  name: \"model\",\n                  rawName: \"v-model\",\n                  value: _vm.projectinfo.projectname,\n                  expression: \"projectinfo.projectname\"\n                }\n              ],\n              attrs: { type: \"text\", id: \"projectname\", required: \"\" },\n              domProps: { value: _vm.projectinfo.projectname },\n              on: {\n                input: function($event) {\n                  if ($event.target.composing) {\n                    return\n                  }\n                  _vm.$set(_vm.projectinfo, \"projectname\", $event.target.value)\n                }\n              }\n            }),\n            _c(\"label\", { attrs: { for: \"projectnameformat\" } }, [\n              _vm._v(\"Project Name Format:\")\n            ]),\n            _c(\n              \"select\",\n              {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.projectinfo.strongformat,\n                    expression: \"projectinfo.strongformat\"\n                  }\n                ],\n                attrs: { id: \"strongformat\", required: \"\" },\n                on: {\n                  change: function($event) {\n                    var $$selectedVal = Array.prototype.filter\n                      .call($event.target.options, function(o) {\n                        return o.selected\n                      })\n                      .map(function(o) {\n                        var val = \"_value\" in o ? o._value : o.value\n                        return val\n                      })\n                    _vm.$set(\n                      _vm.projectinfo,\n                      \"strongformat\",\n                      $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n                    )\n                  }\n                }\n              },\n              _vm._l(_vm.strongformats, function(strongformat, index) {\n                return _c(\n                  \"option\",\n                  { key: index, domProps: { value: strongformat.key } },\n                  [\n                    _vm._v(\n                      \"\\n            \" +\n                        _vm._s(strongformat.value) +\n                        \"\\n        \"\n                    )\n                  ]\n                )\n              }),\n              0\n            ),\n            _c(\"label\", { attrs: { for: \"projectnamefontsize\" } }, [\n              _vm._v(\"Project Name Font Size:\")\n            ]),\n            _c(\"input\", {\n              directives: [\n                {\n                  name: \"model\",\n                  rawName: \"v-model\",\n                  value: _vm.projectinfo.projectnamefontsize,\n                  expression: \"projectinfo.projectnamefontsize\"\n                }\n              ],\n              attrs: {\n                type: \"number\",\n                id: \"projectnamefontsize\",\n                required: \"\"\n              },\n              domProps: { value: _vm.projectinfo.projectnamefontsize },\n              on: {\n                input: function($event) {\n                  if ($event.target.composing) {\n                    return\n                  }\n                  _vm.$set(\n                    _vm.projectinfo,\n                    \"projectnamefontsize\",\n                    $event.target.value\n                  )\n                }\n              }\n            }),\n            _c(\"br\"),\n            _c(\"label\", { attrs: { for: \"projectdescription\" } }, [\n              _vm._v(\"Project Description:\")\n            ]),\n            _c(\"textarea\", {\n              directives: [\n                {\n                  name: \"model\",\n                  rawName: \"v-model\",\n                  value: _vm.projectinfo.projectdescription,\n                  expression: \"projectinfo.projectdescription\"\n                }\n              ],\n              attrs: { type: \"text\", id: \"projectdescription\", required: \"\" },\n              domProps: { value: _vm.projectinfo.projectdescription },\n              on: {\n                input: function($event) {\n                  if ($event.target.composing) {\n                    return\n                  }\n                  _vm.$set(\n                    _vm.projectinfo,\n                    \"projectdescription\",\n                    $event.target.value\n                  )\n                }\n              }\n            }),\n            _c(\"label\", { attrs: { for: \"projectdescriptionformattype\" } }, [\n              _vm._v(\"Project Description Format:\")\n            ]),\n            _c(\n              \"select\",\n              {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.projectinfo.work,\n                    expression: \"projectinfo.work\"\n                  }\n                ],\n                attrs: { id: \"projectdescriptionformattype\", required: \"\" },\n                on: {\n                  change: function($event) {\n                    var $$selectedVal = Array.prototype.filter\n                      .call($event.target.options, function(o) {\n                        return o.selected\n                      })\n                      .map(function(o) {\n                        var val = \"_value\" in o ? o._value : o.value\n                        return val\n                      })\n                    _vm.$set(\n                      _vm.projectinfo,\n                      \"work\",\n                      $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n                    )\n                  }\n                }\n              },\n              _vm._l(_vm.works, function(work, index) {\n                return _c(\n                  \"option\",\n                  { key: index, domProps: { value: work.key } },\n                  [_vm._v(\"\\n            \" + _vm._s(work.value) + \"\\n        \")]\n                )\n              }),\n              0\n            ),\n            _c(\"label\", { attrs: { name: \"project_name\" } }, [\n              _vm._v(\"Project Industry\")\n            ]),\n            _c(\n              \"select\",\n              {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.projectinfo.project,\n                    expression: \"projectinfo.project\"\n                  }\n                ],\n                attrs: { id: \"projectNameList\", required: \"\" },\n                on: {\n                  change: function($event) {\n                    var $$selectedVal = Array.prototype.filter\n                      .call($event.target.options, function(o) {\n                        return o.selected\n                      })\n                      .map(function(o) {\n                        var val = \"_value\" in o ? o._value : o.value\n                        return val\n                      })\n                    _vm.$set(\n                      _vm.projectinfo,\n                      \"project\",\n                      $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n                    )\n                  }\n                }\n              },\n              _vm._l(_vm.projects, function(project, index) {\n                return _c(\n                  \"option\",\n                  { key: index, domProps: { value: project.id } },\n                  [\n                    _vm._v(\n                      \"\\n            \" + _vm._s(project.name) + \"\\n        \"\n                    )\n                  ]\n                )\n              }),\n              0\n            ),\n            _c(\"label\", { attrs: { name: \"project_industry\" } }, [\n              _vm._v(\"Industry\")\n            ]),\n            _c(\n              \"select\",\n              {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.projectinfo.industry,\n                    expression: \"projectinfo.industry\"\n                  }\n                ],\n                attrs: { id: \"industryList\", required: \"\" },\n                on: {\n                  change: function($event) {\n                    var $$selectedVal = Array.prototype.filter\n                      .call($event.target.options, function(o) {\n                        return o.selected\n                      })\n                      .map(function(o) {\n                        var val = \"_value\" in o ? o._value : o.value\n                        return val\n                      })\n                    _vm.$set(\n                      _vm.projectinfo,\n                      \"industry\",\n                      $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n                    )\n                  }\n                }\n              },\n              _vm._l(_vm.industries, function(industry, index) {\n                return _c(\n                  \"option\",\n                  { key: index, domProps: { value: industry.key } },\n                  [\n                    _vm._v(\n                      \"\\n            \" + _vm._s(industry.value) + \"\\n        \"\n                    )\n                  ]\n                )\n              }),\n              0\n            ),\n            _c(\"label\", { attrs: { name: \"project_type\" } }, [_vm._v(\"Type\")]),\n            _c(\n              \"select\",\n              {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.projectinfo.type,\n                    expression: \"projectinfo.type\"\n                  }\n                ],\n                attrs: { id: \"typeList\", required: \"\" },\n                on: {\n                  change: function($event) {\n                    var $$selectedVal = Array.prototype.filter\n                      .call($event.target.options, function(o) {\n                        return o.selected\n                      })\n                      .map(function(o) {\n                        var val = \"_value\" in o ? o._value : o.value\n                        return val\n                      })\n                    _vm.$set(\n                      _vm.projectinfo,\n                      \"type\",\n                      $event.target.multiple ? $$selectedVal : $$selectedVal[0]\n                    )\n                  }\n                }\n              },\n              _vm._l(_vm.types, function(type, index) {\n                return _c(\n                  \"option\",\n                  { key: index, domProps: { value: type.key } },\n                  [_vm._v(\"\\n            \" + _vm._s(type.value) + \"\\n        \")]\n                )\n              }),\n              0\n            ),\n            _c(\"br\"),\n            _c(\"label\", { attrs: { name: \"project_description\" } }, [\n              _vm._v(\"Project Upload\")\n            ]),\n            _c(\n              \"div\",\n              {\n                on: {\n                  dragleave: _vm.fileDragOut,\n                  dragover: _vm.fileDragIn,\n                  drop: _vm.handleFileDrop\n                }\n              },\n              [\n                _c(\"br\"),\n                _c(\"div\", { staticClass: \"file-wrapper\" }, [\n                  _c(\"input\", {\n                    attrs: { type: \"file\", name: \"file\", multiple: \"True\" },\n                    on: {\n                      change: function($event) {\n                        return _vm.handleProjectFileInput($event)\n                      }\n                    }\n                  }),\n                  _vm._v(\" Click to insert Project Files.\\n      \")\n                ]),\n                _c(\n                  \"ul\",\n                  _vm._l(_vm.projectfiles, function(file, index) {\n                    return _c(\"li\", [\n                      _vm._v(\n                        \"\\n          \" +\n                          _vm._s(file.name) +\n                          \" (\" +\n                          _vm._s(file.size) +\n                          \" b)\\n          \"\n                      ),\n                      _c(\n                        \"button\",\n                        {\n                          attrs: { title: \"Remove\" },\n                          on: {\n                            click: function($event) {\n                              return _vm.removeProjectFile(index)\n                            }\n                          }\n                        },\n                        [_vm._v(\"X\")]\n                      )\n                    ])\n                  }),\n                  0\n                )\n              ]\n            ),\n            _c(\"br\"),\n            _c(\"br\"),\n            _c(\"button\", { on: { click: _vm.addProjectSection } }, [\n              _vm._v(\"Add Project Section\")\n            ]),\n            _c(\"br\"),\n            _vm._l(_vm.projectinfo.sections, function(section, counter) {\n              return _c(\"div\", { key: counter, staticClass: \"section\" }, [\n                _c(\n                  \"span\",\n                  {\n                    on: {\n                      click: function($event) {\n                        return _vm.deleteProjectSection(counter)\n                      }\n                    }\n                  },\n                  [_vm._v(\"x\")]\n                ),\n                _c(\"label\", { attrs: { for: \"sectionname\" } }, [\n                  _vm._v(_vm._s(counter + 1) + \". Section Name:\")\n                ]),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model.lazy\",\n                      value: section.sectionname,\n                      expression: \"section.sectionname\",\n                      modifiers: { lazy: true }\n                    }\n                  ],\n                  attrs: { type: \"text\", required: \"\" },\n                  domProps: { value: section.sectionname },\n                  on: {\n                    change: function($event) {\n                      return _vm.$set(\n                        section,\n                        \"sectionname\",\n                        $event.target.value\n                      )\n                    }\n                  }\n                }),\n                _c(\"label\", { attrs: { for: \"sectiontext\" } }, [\n                  _vm._v(\"Section Text:\")\n                ]),\n                _c(\"textarea\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model.lazy\",\n                      value: section.sectiontext,\n                      expression: \"section.sectiontext\",\n                      modifiers: { lazy: true }\n                    }\n                  ],\n                  attrs: { type: \"textarea\", required: \"\" },\n                  domProps: { value: section.sectiontext },\n                  on: {\n                    change: function($event) {\n                      return _vm.$set(\n                        section,\n                        \"sectiontext\",\n                        $event.target.value\n                      )\n                    }\n                  }\n                }),\n                _c(\"br\"),\n                _c(\n                  \"div\",\n                  {\n                    on: {\n                      dragleave: _vm.fileDragOut,\n                      dragover: _vm.fileDragIn,\n                      drop: _vm.handleFileDrop\n                    }\n                  },\n                  [\n                    _c(\"br\"),\n                    _c(\"div\", { staticClass: \"file-wrapper\" }, [\n                      _c(\"input\", {\n                        attrs: { type: \"file\", name: \"file\", multiple: \"True\" },\n                        on: {\n                          change: function($event) {\n                            return _vm.handleFileInput($event, counter)\n                          }\n                        }\n                      }),\n                      _vm._v(\" Click to insert section Files.\\n      \")\n                    ]),\n                    _c(\n                      \"ul\",\n                      _vm._l(section.files, function(file, index) {\n                        return _c(\"li\", [\n                          _vm._v(\n                            \"\\n          \" +\n                              _vm._s(file.name) +\n                              \" (\" +\n                              _vm._s(file.size) +\n                              \" b)\\n          \"\n                          ),\n                          _c(\n                            \"button\",\n                            {\n                              attrs: { title: \"Remove\" },\n                              on: {\n                                click: function($event) {\n                                  return _vm.removeFile(index, counter)\n                                }\n                              }\n                            },\n                            [_vm._v(\"X\")]\n                          )\n                        ])\n                      }),\n                      0\n                    )\n                  ]\n                )\n              ])\n            }),\n            _c(\"button\", { staticClass: \"btn btn-primary\" }, [_vm._v(\"Create\")])\n          ],\n          2\n        )\n      ])\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}