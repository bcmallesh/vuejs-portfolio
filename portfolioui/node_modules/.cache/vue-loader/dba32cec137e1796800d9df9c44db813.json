{"remainingRequest":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vuejs\\workspace\\09062020\\portfolioui\\src\\components\\CreateProjectWithSections.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\src\\components\\CreateProjectWithSections.vue","mtime":1591757575794},{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\css-loader\\index.js","mtime":1591670586680},{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1591670721639},{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\postcss-loader\\src\\index.js","mtime":1591670651348},{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591670532187},{"path":"D:\\vuejs\\workspace\\09062020\\portfolioui\\node_modules\\vue-loader\\lib\\index.js","mtime":1591670721635}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.uploadBox {\n    position: relative;\n    background: #eee;\n    padding: 0 1em 1em 1em;\n    margin: 1em;\n}\n\n.uploadBox h3 {\n    padding-top: 1em;\n}\n\n.uploadBox .uploadBoxMain {\n    position: relative;\n    margin-bottom: 1em;\n    margin-right: 1em;\n}\n\n/* Drag and drop */\n.uploadBox .dropArea {\n    position: relative;\n    width: 100%;\n    height: 300px;\n    border: 5px dashed #00ADCE;\n    text-align: center;\n    font-size: 2em;\n    padding-top: 80px;\n}\n\n.uploadBox .dropArea input {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0;\n}\n/* End drag and drop */\n\n/* Loader */\n.uploadBox .loader {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #fff;\n    opacity: 0.9;\n}\n\n.uploadBox .loaderImg {\n    border: 9px solid #eee;\n    border-top: 9px solid #00ADCE;\n    border-radius: 50%;\n    width: 70px;\n    height: 70px;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n/* End Loader */\n\n.uploadBox .errorMsg {\n    font-size: 2em;\n    color: #a94442;\n}\n\n.uploadBox .successMsg {\n    font-size: 2em;\n    color: #3c763d;\n}\n",{"version":3,"sources":["CreateProjectWithSections.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyPA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"CreateProjectWithSections.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"uploadBox\">\n        <h3>{{headerMessage}}</h3>\n        <form role=\"form\" enctype=\"multipart/form-data\" @submit.prevent=\"onSubmit\">\n            <div class=\"uploadBoxMain\" v-if=\"!itemsAdded\">\n                <div class=\"form-group\">\n                    <div class=\"dropArea\" @ondragover=\"onChange\" :class=\"dragging ? 'dropAreaDragging' : ''\" @dragenter=\"dragging=true\" @dragend=\"dragging=false\" @dragleave=\"dragging=false\">\n                        <h3>{{dropAreaPrimaryMessage}}</h3>\n                        <input type=\"file\" id=\"items\" name=\"items[]\" required multiple @change=\"onChange\">\n                        <p class=\"help-block\">{{dropAreaSecondaryMessage}}</p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"uploadBoxMain\" v-else>\n                <p><strong>{{fileNameMessage}}</strong></p>\n                <ol>\n                    <li v-for=\"name in itemsNames\">{{name}}</li>\n                </ol>\n                <p><strong>{{fileSizeMessage}}</strong></p>\n                <ol>\n                    <li v-for=\"size in itemsSizes\">{{size}}</li>\n                </ol>\n                <p><strong>{{totalFileMessage}}</strong> {{itemsAdded}}</p>\n                <p><strong>{{totalUploadSizeMessage}}</strong> {{itemsTotalSize}}</p>\n                <button @click=\"removeItems\">{{removeFileMessage}}</button>\n                <div class=\"loader\" v-if=\"isLoaderVisible\">\n                    <div class=\"loaderImg\"></div>\n                </div>\n            </div>\n            <div>\n                <button type=\"submit\" class=\"btn btn-primary btn-black btn-round\" :disabled=\"itemsAdded < minItems || itemsAdded > maxItems\">\n                    {{uploadButtonMessage}}\n                </button>\n                <button type=\"button\" class=\"btn btn-default btn-round\" @click=\"removeItems\">{{cancelButtonMessage}}</button>\n            </div>\n            <br>\n            <div class=\"successMsg\" v-if=\"successMsg !== ''\">{{successMsg}}</div>\n            <div class=\"errorMsg\" v-if=\"errorMsg !== ''\">{{fileUploadErrorMessage}}:<br>{{errorMsg}} <br>{{retryErrorMessage}}</div>\n            <div class=\"errorMsg\" v-if=\"itemsAdded && itemsAdded < minItems\">{{minFilesErrorMessage}}: {{minItems}}.  <br>{{retryErrorMessage}} </div>\n            <div class=\"errorMsg\" v-if=\"itemsAdded && itemsAdded > maxItems\">{{maxFilesErrorMessage}}: {{maxItems}}.  <br>{{retryErrorMessage}}</div>\n        </form>\n    </div>\n</template>\n\n<script>\nrequire('es6-promise').polyfill();\nimport axios from 'axios';\n\ncomponent: {axios}\nexport default {\n    props: {\n        postURL: {\n            type: String,\n            required: true\n        },\n        minItems: {\n            type: Number,\n            default: 1\n        },\n        maxItems: {\n            type: Number,\n            default: 30\n        },\n        method: {\n            type: String,\n            default: 'post'\n        },\n        postMeta: {\n            type: [String, Array, Object],\n            default: ''\n        },\n        postData: {\n            type: [Object],\n            default: () => {}\n        },\n        postHeader:{\n          type: [Object],\n          default: () => {}\n        },\n        successMessagePath: {\n            type: String,\n            required: true\n        },\n        errorMessagePath: {\n            type: String,\n            required: true\n        },\n        headerMessage: {\n          type: String,\n          default: 'Add files'\n        },\n        dropAreaPrimaryMessage: {\n          type: String,\n          default: 'Drop multiple files here'\n        },\n        dropAreaSecondaryMessage: {\n          type: String,\n          default: 'or click to upload'\n        },\n        fileNameMessage: {\n          type: String,\n          default: 'Names'\n        },\n        fileSizeMessage: {\n          type: String,\n          default: 'Sizes'\n        },\n        totalFileMessage: {\n          type: String,\n          default: 'Total files:'\n        },\n        totalUploadSizeMessage: {\n          type: String,\n          default: 'Total upload size:'\n        },\n        removeFileMessage: {\n          type: String,\n          default: 'Remove files'\n        },\n        uploadButtonMessage: {\n          type: String,\n          default: 'Upload'\n        },\n        cancelButtonMessage: {\n          type: String,\n          default: 'Cancel'\n        },\n        fileUploadErrorMessage: {\n          type: String,\n          default: 'An error has occurred'\n        },\n        minFilesErrorMessage: {\n          type: String,\n          default: 'Minimum files that need to be added to uploader'\n        },\n        maxFilesErrorMessage:  {\n          type: String,\n          default: 'Maximum files that can be added to uploader'\n        },\n        retryErrorMessage: {\n          type: String,\n          default: 'Please remove the files and try again.'\n        },\n        httpMethodErrorMessage: {\n          type: String,\n          default: \"This HTTP method is not allowed. Please use either 'put' or 'post' methods.\"\n        },\n        showHttpMessages: {\n          type: Boolean,\n          default: true\n        }\n    },\n\n    /*\n     * The component's data.\n     */\n    data() {\n        return {\n            dragging: false,\n            items: [],\n            itemsAdded: '',\n            itemsNames: [],\n            itemsSizes: [],\n            itemsTotalSize: '',\n            formData: '',\n            successMsg: '',\n            errorMsg: '',\n            isLoaderVisible: false,\n        }\n    },\n\n    methods: {\n        // http://scratch99.com/web-development/javascript/convert-bytes-to-mb-kb/\n        bytesToSize(bytes) {\n            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n            if (bytes === 0) return 'n/a';\n            let i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n            if (i === 0) return bytes + ' ' + sizes[i];\n            return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];\n        },\n\n        onChange(e) {\n            this.successMsg = '';\n            this.errorMsg = '';\n            this.formData = new FormData();\n            let files = e.target.files || e.dataTransfer.files;\n            this.itemsAdded = files.length;\n            let fileSizes = 0;\n            for (let x in files) {\n                if (!isNaN(x)) {\n                    this.items = e.target.files[x] || e.dataTransfer.files[x];\n                    this.itemsNames[x] = files[x].name;\n                    this.itemsSizes[x] = this.bytesToSize(files[x].size);\n                    fileSizes += files[x].size;\n                    this.formData.append('items[]', this.items);\n                }\n            }\n            this.itemsTotalSize = this.bytesToSize(fileSizes);\n        },\n\n        removeItems() {\n            this.items = '';\n            this.itemsAdded = '';\n            this.itemsNames = [];\n            this.itemsSizes = [];\n            this.itemsTotalSize = '';\n            this.dragging = false;\n        },\n\n        onSubmit() {\n            this.isLoaderVisible = true;\n\n            if ((typeof this.postMeta === 'string' && this.postMeta !== '') ||\n                (typeof this.postMeta === 'object' && Object.keys(this.postMeta).length > 0)) {\n                this.formData.append('postMeta', this.postMeta);\n            }\n            \n            if(typeof this.postData ==='object' && this.postData !== null && Object.keys(this.postData).length > 0){\n              for(var key in this.postData){\n                this.formData.append(key, this.postData[key]);\n              }\n            }\n\n            if (this.method === 'put' || this.method === 'post' ) {\n                axios({method: this.method, url: this.postURL, data: this.formData,headers:this.postHeader})\n                    .then((response) => {\n                        this.isLoaderVisible = false;\n                        // Show success message\n                        if(this.showHttpMessages)\n                          this.successMsg = response + \".\" + this.successMessagePath;\n                        this.removeItems();\n                    })\n                    .catch((error) => {\n                        this.isLoaderVisible = false;\n                        if(this.showHttpMessages)\n                          this.errorMsg = error + \".\" + this.errorMessagePath;\n                        this.removeItems();\n                    });\n            } else {\n                if(this.showHttpMessages)\n                this.errorMsg = this.httpMethodErrorMessage;\n                this.removeItems();\n            }\n        },\n    }\n}\n</script>\n\n<style>\n.uploadBox {\n    position: relative;\n    background: #eee;\n    padding: 0 1em 1em 1em;\n    margin: 1em;\n}\n\n.uploadBox h3 {\n    padding-top: 1em;\n}\n\n.uploadBox .uploadBoxMain {\n    position: relative;\n    margin-bottom: 1em;\n    margin-right: 1em;\n}\n\n/* Drag and drop */\n.uploadBox .dropArea {\n    position: relative;\n    width: 100%;\n    height: 300px;\n    border: 5px dashed #00ADCE;\n    text-align: center;\n    font-size: 2em;\n    padding-top: 80px;\n}\n\n.uploadBox .dropArea input {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0;\n}\n/* End drag and drop */\n\n/* Loader */\n.uploadBox .loader {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: #fff;\n    opacity: 0.9;\n}\n\n.uploadBox .loaderImg {\n    border: 9px solid #eee;\n    border-top: 9px solid #00ADCE;\n    border-radius: 50%;\n    width: 70px;\n    height: 70px;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n/* End Loader */\n\n.uploadBox .errorMsg {\n    font-size: 2em;\n    color: #a94442;\n}\n\n.uploadBox .successMsg {\n    font-size: 2em;\n    color: #3c763d;\n}\n</style>"]}]}